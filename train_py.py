# -*- coding: utf-8 -*-
"""train.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQ20u4an_S4lEd69fLrRCc4XSCq15rAi
"""

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(classification_report(y_test, y_pred))

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, cross_val_score
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import cross_val_predict
from sklearn.model_selection import train_test_split

df=pd.read_csv('turnover.csv',encoding='ISO-8859-1')

df.head()

"""Check for missing values and column data types

"""

df.isnull().sum()

df.dtypes

df.info()

df.describe()

from sklearn.preprocessing import LabelEncoder
print('Categorical columns: ')
for col in df.columns:
    if df[col].dtype == 'object':
        values = df[col].value_counts()
        values = dict(values)

        print(str(col))
        label = LabelEncoder()
        label = label.fit(df[col])
        df[col] = label.transform(df[col].astype(str))

        new_values = df[col].value_counts()
        new_values = dict(new_values)

        value_dict = {}
        i=0
        for key in values:
            value_dict[key] = list(new_values)[i]
            i+= 1
        print(value_dict)

"""EDA"""

from plotly.offline import iplot, init_notebook_mode
import plotly.express as px

from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier,GradientBoostingClassifier, ExtraTreesClassifier
df_corr = df.corr()
fig = px.imshow(df_corr)
fig.show()

fig = px.pie(df, "event", color='event', hole=.3)
fig.show()

fig = px.histogram(df, x="stag", color='event', marginal='box', barmode='group')
fig.show()

fig = px.histogram(df, x="age", color='event', marginal='box', barmode='group')
fig.show()

fig = px.histogram(df, x="gender", color='event', barmode='group')
fig.show()

X = df.drop(columns=['event'])
y = df['event']

X_train, X_test, y_train, y_test = train_test_split(X, y , test_size=0.2)

models = {}
def train_validate_predict(classifiers, x_train, y_train, x_test, y_test, index):
    model = classifiers
    model.fit(x_train, y_train)

    y_pred = model.predict(x_test)

    r2 = accuracy_score(y_test, y_pred)
    models[index] = r2

model_names = ['DecisionTreeClassifier','LogisticRegression']
model_list = [DecisionTreeClassifier,LogisticRegression]

index = 0
for classifiers in model_list:
    train_validate_predict(classifiers(), X_train, y_train, X_test, y_test, model_names[index])
    index+=1

models

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)